@model QLSL.Models.TLSignalPlan
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="MyModalTitle">Tạo nhật ký</h4>
</div>


@using (Html.BeginForm(null, null, FormMethod.Post, new {id = "CreateTLSignalPlan"}))
{
    @Html.AntiForgeryToken()

    <div class="modal-body">

        <div class="row">
            @Html.ValidationSummary(false, "", new {@class = "text-danger"})
            <div class="col-md-6">
                <div class="form-group">
                    <div class='input-group'>

                        <span class="input-group-addon">
                           <span class="glyphicon glyphicon-play-circle" ></span>
                        </span>
                        @Html.DropDownListFor(model => model.TLNodeID, ViewBag.TLNodeID as SelectList, new {@class = "form-control chosen-select", data_live_search = "true", id = "TLNodeID"})
                    </div>

                </div>
                <div class="form-group">
                    <div class='input-group'>
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-question-sign"></span>
                        </span>
                        @Html.DropDownListFor(model => model.ReasonChangeSPID, ViewBag.ReasonChangeSPID as SelectList, new {@class = "form-control"})
                    </div>

                </div>
                <div class="form-group">
                    <div class='input-group'>
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-tasks"></span>
                        </span>
                        @Html.TextBoxFor(model => model.SignalPlanCurrent, new {@class = "form-control", type = "text", placeholder = "Pha đèn hiện tại", Value = ViewBag.SignalPlan})
                    </div>

                </div>

            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <div class='input-group'>
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                        @Html.TextBoxFor(model => model.DateOccur, "{0:dd-MM-yyyy HH:mm}", new {@class = "form-control", type = "text", id = "datetimepicker"})
                    </div>

                </div>


                <div class="form-group">
                    <div class='input-group'>
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-user"></span>
                        </span>
                        @Html.TextBoxFor(model => model.OperatorName, new {@class = "form-control", type = "text", placeholder = "Người vận hành", Value = User.Identity.Name, @readonly = true})
                    </div>

                </div>
                <div class="form-group">
                    <div class='input-group'>
                        <span class="input-group-addon primary">
                            <span class="glyphicon glyphicon-tasks"></span>
                        </span>
                        @Html.TextBoxFor(model => model.SignalPlanChanged, new {@class = "form-control", type = "text", placeholder = "Pha đèn mới", Value = ViewBag.SignalPlan})
                    </div>

                </div>

            </div>
            <div class="col-md-12">
                <div class="form-group">
                    <div class='input-group'>
                        <span class="input-group-addon">
                        <span class="glyphicon glyphicon-list"></span>
                    </span>
                        @Html.TextAreaFor(model => model.Note, 3, 0, new {@class = "form-control", placeholder = "Ghi chú"})
                    </div>

                </div>

            </div>

        </div>

    </div>
    <div class="modal-footer">
        @*<button type="button" class="btn" data-dismiss="modal">Cancel</button>
        <input type="submit" class="btn btn-primary" value="Save" id="btnSubmit" />*@
        <button type="submit" class="btn btn-success pull-left" name="btnConfirm" value="Save" id="btnSubmit">Lưu</button>
    </div>
}

@*@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/Datetimepicker")
@Scripts.Render("~/bundles/bootstrapSelect")*@

<script type="text/javascript">
    $(function() {
        $('#datetimepicker')
            .datetimepicker({
                defaultDate: new Date(),
                locale: 'vi',
                format: 'DD-MM-YYYY HH:mm'
            });
        $('#MyModal').on('shown.bs.modal', function () {
            $('.chosen-select', this).chosen();
        });

    });
</script>
<script>
    $(document)
        .ready(function() {
            
            //$.validator.unobtrusive.parse('#CreateTLNS');
            //$("#btnSubmit")
            //    .click(function () {
            //        if (!$("#CreateTLNS").valid()) {
            //            return false;
            //        }
            //    });
            if ($("#TLNodeID").val() > 0) {
                $.ajax({
                    type: 'GET',
                    dataType: 'json',
                    //traditional: true,
                    contentType: "application/json; charset=utf-8",
                    url: '/TLS/CurrentPlan',
                    data: { noteID: $("#TLNodeID").val() },
                    success: function (rslt) {
                        $("#SignalPlanCurrent").val(rslt);
                        $("#SignalPlanChanged").val(rslt);
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex.errorCode);
                    }
                });
            };
            $("#TLNodeID")
                .change(function() {
                    if ($("#TLNodeID").val() > 0) {
                        $.ajax({
                            type: 'GET',
                            dataType: 'json',
                            //traditional: true,
                            contentType: "application/json; charset=utf-8",
                            url: '/TLS/CurrentPlan',
                            data: { noteID: $("#TLNodeID").val() },
                            success: function(rslt) {
                                $("#SignalPlanCurrent").val(rslt);
                                $("#SignalPlanChanged").val(rslt);
                            },
                            error: function(ex) {
                                alert('Failed to retrieve states.' + ex.errorCode);
                            }
                        });
                    };
                    return false;
                });
        });

</script>